package ${package}.${moduleName}.controller;

import java.util.Arrays;
import java.util.Map;
import java.util.List;

import io.hummingbird.common.validator.ValidatorUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import cn.afterturn.easypoi.entity.vo.NormalExcelConstants;
import cn.afterturn.easypoi.excel.entity.ExportParams;
import cn.afterturn.easypoi.excel.entity.enmus.ExcelType;
import cn.afterturn.easypoi.view.PoiBaseView;
import org.springframework.util.StringUtils;
import io.hummingbird.common.utils.Constant;

import ${entityPackage}.${entityModuleName}.entity.${className}Entity;
import ${package}.${moduleName}.service.${className}Service;
import ${mainPath}.common.utils.PageUtils;
import ${mainPath}.common.utils.R;



/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@RestController
@RequestMapping("${moduleName}/${pathName}")
public class ${className}Controller {
    @Autowired
    private ${className}Service ${classname}Service;

    /**
     * 列表
     */
    @RequestMapping("/list")
    @RequiresPermissions("${moduleName}:${pathName}:list")
    public R list(@RequestParam Map<String, Object> params){
        PageUtils page = ${classname}Service.queryPage(params);

        return R.ok().put("page", page);
    }


    /**
     * 信息
     */
    @RequestMapping("/info/{${pk.attrname}}")
    @RequiresPermissions("${moduleName}:${pathName}:info")
    public R info(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}){
        ${className}Entity ${classname} = ${classname}Service.getById(${pk.attrname});

        return R.ok().put("${classname}", ${classname});
    }

    /**
     * 保存
     */
    @RequestMapping("/save")
    @RequiresPermissions("${moduleName}:${pathName}:save")
    public R save(@RequestBody ${className}Entity ${classname}){
        ${classname}Service.save(${classname});

        return R.ok();
    }

    /**
     * 修改
     */
    @RequestMapping("/update")
    @RequiresPermissions("${moduleName}:${pathName}:update")
    public R update(@RequestBody ${className}Entity ${classname}){
        ValidatorUtils.validateEntity(${classname});
        ${classname}Service.updateById(${classname});
        
        return R.ok();
    }

    /**
     * 删除
     */
    @RequestMapping("/delete")
    @RequiresPermissions("${moduleName}:${pathName}:delete")
    public R delete(@RequestBody ${pk.attrType}[] ${pk.attrname}s){
        ${classname}Service.removeByIds(Arrays.asList(${pk.attrname}s));

        return R.ok();
    }
    
    /**
	 * 导出
	 */
	@RequestMapping("/export")
	@RequiresPermissions("${moduleName}:${pathName}:list")
	public void export(@RequestParam Map<String, Object> params,ModelMap map, HttpServletRequest request,
			HttpServletResponse response) {
		//查询出原始数据
		 QueryWrapper<${className}Entity> warpper=new QueryWrapper<${className}Entity>();
     #foreach($column in $columns)
      String ${column.attrname} =(String)params.get("${column.attrname}");
      if(!StringUtils.isEmpty(${column.attrname} )){
			 warpper.likeRight("${column.columnName} ", ${column.attrname} );
		 }
     #end
      warpper.apply(params.get(Constant.SQL_FILTER) != null,(String) params.get(Constant.SQL_FILTER));
		List<${className}Entity> list= ${classname}Service.list(warpper);
		//设置导出excel模板
		ExportParams exporrParams = new ExportParams("${comments}", "${comments}", ExcelType.XSSF);
		map.put(NormalExcelConstants.DATA_LIST, list);
		map.put(NormalExcelConstants.CLASS, ${className}Entity.class);
		map.put(NormalExcelConstants.PARAMS, exporrParams);
		map.put(NormalExcelConstants.FILE_NAME, "${comments}");
		PoiBaseView.render(map, request, response, NormalExcelConstants.EASYPOI_EXCEL_VIEW);
	}

}
